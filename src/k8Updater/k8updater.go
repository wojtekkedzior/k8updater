package main

import (
	"flag"
	"fmt"
	"github.com/fsnotify/fsnotify"
	"log"
	"os/exec"
)

var yamllintLocation,
	kubectlLocation string

var deployScriptLocation,
	yamlScriptLocation string

var checkYaml bool

const defaultYamlLintLocation = "/bin/yamllint"
const defaultKubectlLocation = "/usr/bin/kubectl"

func init() {
	flag.StringVar(&yamllintLocation, "yaml-lint-location", defaultYamlLintLocation, "Location of yamllint")
	flag.StringVar(&kubectlLocation, "kubectl-location", defaultKubectlLocation, "Kubectl location")

	flag.StringVar(&yamlScriptLocation, "yaml-deploy-script", "", "Location of yamllint")

	flag.BoolVar(&checkYaml, "check-yaml", false, "Whether to verify the YAML file is valid or not")

	flag.Parse()
}

func main() {
	watcher, err := fsnotify.NewWatcher()
	if err != nil {
		log.Fatal(err)
	}
	defer watcher.Close()

	done := make(chan bool)

	err = watcher.Add("/home/wojtek/workspace/WeatherHealthChecker/goapp-deployment.yaml")
	if err != nil {
		log.Fatal(err)
	}

	go func() {
		ignore := false
		for {
			select {
			case event, ok := <-watcher.Events:
				if !ok {
					log.Fatal("Something went wrong with watcher.Events %s", err)
				}

				if event.Op == fsnotify.Write {
					//ugly hack to hide second write event being generated by some editors (looking at you Eclipse)
					if ignore {
						ignore = false
						continue
					}

					log.Println("File modified: ", event.Name)

					if checkYaml {
						fmt.Println("Validating YAML file: " + yamlScriptLocation + " using yamlint located at: " + yamllintLocation)
						out, err := exec.Command(yamllintLocation, yamlScriptLocation).Output()
						if err != nil {
							fmt.Printf("Results of validating %s\n", out)
						} else {
							fmt.Println("Yaml is valid")
						}
					}

					fmt.Println("Executing kubectl updatet using: " + yamlScriptLocation)
					deploy, errTwo := exec.Command(kubectlLocation, "apply", "-f", yamlScriptLocation).Output()

					if errTwo != nil {
						fmt.Printf("Applying of yaml failed: %s\n", errTwo)
					} else {
						fmt.Printf("Kubectl apply succesful: %s\n", deploy)
					}

					ignore = true
				}
			case err, ok := <-watcher.Errors:
				if !ok {
					return
				}
				log.Println("error:", err)
			}
		}
	}()

	<-done
}
